{"version":3,"sources":["components/Grid.js","containers/ScrollContainer.js","containers/GenericContainer.js","App.js","index.js"],"names":["Grid","_ref","data","columnCount","startIndex","endIndex","style","renderItem","offset","elementHeight","elementWidth","batch","slice","react_default","a","createElement","className","map","element","index","background","row","Math","floor","column","key","top","concat","left","width","height","ScrollContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onScroll","_this$props","bufferCount","range","_this$state","state","numberVisible","scrollPosition","_viewPort","current","scrollTop","scrollingDown","prevScroll","start","getStartingIndex","end","getEndingIndex","setState","viewPortHeight","getContainerHeight","memoizeOne","dataLength","getRowCount","adjustedHeight","clientHeight","viewportPadding","ceil","getNumberVisible","rowCount","handleResize","setConfig","_this$props2","clientWidth","containerPadding","React","createRef","scrollThrottled","throttle","resizeDebounced","debounce","window","addEventListener","removeEventListener","nextProps","nextState","_this$state2","length","_this$state3","_this$props3","ref","components_Grid","assign","Component","defaultProps","gradients","GenericContainer","item","Fragment","text","innerHeight","list","Array","fill","val","loremIpsum","count","units","sentenceLowerBound","sentenceUpperBound","sample","containers_ScrollContainer","App","containers_GenericContainer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.4b5375f6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/Grid.css\";\n\n/**\n * Grid component that is responsible for rendering desired data\n * @param {array} data        array of data passed from parent\n * @param {number} columnCount  variable representing the number of columns to render\n * @param {number} startIndex  variable indicating the current starting index of data items to display\n * @param {number} endIndex    variabe indicating the last index of data items to display\n * @param {object} style       configuration object containing element width, height, and offset values\n * @param {function} renderItem  function to render each data item in row/column\n */\nconst Grid = ({\n  data,\n  columnCount,\n  startIndex,\n  endIndex,\n  style,\n  renderItem\n}) => {\n  const { offset, elementHeight, elementWidth } = style;\n  const batch = data.slice(startIndex, endIndex);\n\n  return (\n    <div className=\"grid\">\n      {batch.map(element => {\n        const { index, background } = element;\n        const row = Math.floor(index / columnCount);\n        const column = index % columnCount;\n\n        return (\n          <div\n            key={index}\n            style={{\n              top: `${row * (elementHeight + offset)}px`,\n              left: `${column * (elementWidth + offset)}px`,\n              width: `${elementWidth}px`,\n              height: `${elementHeight}px`,\n              background: `${background}`\n            }}\n            className=\"card\"\n          >\n            {renderItem(element)}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nGrid.propTypes = {\n  data: PropTypes.array.isRequired,\n  startIndex: PropTypes.number.isRequired,\n  endIndex: PropTypes.number.isRequired,\n  style: PropTypes.object.isRequired,\n  renderItem: PropTypes.func.isRequired\n};\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport { throttle, debounce } from \"throttle-debounce\";\nimport memoizeOne from \"memoize-one\";\nimport Grid from \"../components/Grid.js\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/ScrollContainer.css\";\n\n/**\n * Component to generate configuration information for virtualized scroller\n */\nclass ScrollContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this._viewPort = React.createRef();\n\n    this.state = {\n      start: null,\n      end: 0,\n      style: {\n        elementWidth: 0,\n        elementHeight: 0,\n        offset: 30\n      },\n      numberVisible: 0\n    };\n\n    this.prevScroll = null;\n    this.containerPadding = 30;\n    this.viewportPadding = 60;\n    this.scrollThrottled = throttle(150, this.onScroll);\n    this.resizeDebounced = debounce(500, this.handleResize);\n  }\n\n  /**\n   * Set initial and follow-up configurations and add resizing + scroll event listener\n   */\n  componentDidMount() {\n    // variable to track scroll position;\n    this.prevScroll = this._viewPort.current.scrollTop;\n    window.addEventListener(\"resize\", this.resizeDebounced);\n    this._viewPort.current.addEventListener(\"scroll\", this.scrollThrottled);\n    this.setConfig();\n  }\n\n  /**\n   * clean up any event listeners\n   */\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeDebounced);\n    this._viewPort.current.removeEventListener(\"scroll\", this.scrollThrottled);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { start, style } = this.state;\n    const { data } = this.props;\n\n    // if new list supplied, update\n    if (data.length !== nextProps.data.length) {\n      return true;\n    }\n    // resize occurred, update\n    if (style !== nextState.style) {\n      return true;\n    }\n    // new row scrolled to, update\n    if (start !== nextState.start) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onScroll = () => {\n    const { columnCount, bufferCount, range } = this.props;\n    const { style, numberVisible } = this.state;\n    const scrollPosition = this._viewPort.current.scrollTop;\n\n    // boolean flag to determine which direction to add new elements\n    const scrollingDown = scrollPosition > this.prevScroll;\n\n    const start = this.getStartingIndex(\n      scrollPosition,\n      style.elementHeight,\n      style.offset,\n      bufferCount,\n      columnCount,\n      scrollingDown\n    );\n    const end = this.getEndingIndex(\n      start,\n      numberVisible,\n      bufferCount,\n      columnCount,\n      range,\n      scrollingDown\n    );\n\n    this.prevScroll = scrollPosition;\n    this.setState({ start, end });\n  };\n\n  getStartingIndex = (\n    viewPortHeight,\n    elementHeight,\n    offset,\n    bufferCount,\n    columnCount,\n    scrollingDown\n  ) => {\n    let start =\n      Math.floor(viewPortHeight / (elementHeight + offset)) * columnCount;\n\n    return scrollingDown || start - bufferCount * columnCount <= 0\n      ? start\n      : start - bufferCount * columnCount;\n  };\n\n  getEndingIndex = (\n    start,\n    numberVisible,\n    bufferCount,\n    columnCount,\n    range,\n    scrollingDown\n  ) => {\n    let end = start + numberVisible + bufferCount * columnCount;\n\n    // if scrolling down, return last element or current end, otherwise add a buffer row for smoother offscreen exits at bottom of page\n    if (scrollingDown) {\n      return end >= range ? range - 1 : end;\n    } else {\n      return start === 0 ? end : end + columnCount;\n    }\n  };\n\n  // memoize to prevent unnecessary recalculations\n  getContainerHeight = memoizeOne(\n    (dataLength, elementHeight, offset, columnCount) =>\n      (dataLength * (elementHeight + offset)) / columnCount + elementHeight\n  );\n\n  getRowCount = (viewPortHeight, elementHeight, offset) => {\n    // account for the 60px padding-top\n    const adjustedHeight =\n      this._viewPort.current.clientHeight - this.viewportPadding;\n\n    return Math.ceil(adjustedHeight / (elementHeight + offset));\n  };\n\n  getNumberVisible = (columnCount, rowCount) => {\n    return columnCount * rowCount;\n  };\n\n  handleResize = () => {\n    this.setConfig();\n  };\n\n  /**\n   * function to generate state configuration information\n   */\n  setConfig = () => {\n    const { offset } = this.state.style;\n    const { columnCount, bufferCount } = this.props;\n\n    const elementWidth =\n        (this._viewPort.current.clientWidth -\n          offset * (columnCount - 1) -\n          this.containerPadding) /\n        columnCount,\n      elementHeight = elementWidth * 0.75;\n\n    const rowCount = this.getRowCount(\n      this._viewPort.current.clientHeight,\n      elementHeight,\n      offset\n    );\n\n    const numberVisible = this.getNumberVisible(columnCount, rowCount);\n\n    // check if start is null, set to 0, otherwise use existing value\n    const start = this.state.start ? this.state.start : 0;\n\n    const end = this.getEndingIndex(\n      start,\n      numberVisible,\n      bufferCount,\n      columnCount\n    );\n\n    const style = { elementWidth, elementHeight, offset };\n\n    this.setState({ start, end, style, numberVisible });\n  };\n\n  render() {\n    const { style, start, end } = this.state;\n    const { data, columnCount } = this.props;\n    const height = this.getContainerHeight(\n      data.length,\n      style.elementHeight,\n      style.offset,\n      columnCount\n    );\n\n    return (\n      <div className=\"viewport\" ref={this._viewPort}>\n        <div className=\"list-container\" style={{ height }}>\n          {start !== null && (\n            <Grid\n              {...this.props}\n              startIndex={start}\n              endIndex={end}\n              style={style}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nScrollContainer.propTypes = {\n  data: PropTypes.array.isRequired,\n  range: PropTypes.number.isRequired,\n  columnCount: PropTypes.number.isRequired,\n  renderItem: PropTypes.func.isRequired,\n  bufferCount: PropTypes.number\n};\n\nScrollContainer.defaultProps = {\n  bufferCount: 1\n};\n\nexport default ScrollContainer;\n","import React, { Component } from \"react\";\nimport { sample } from \"lodash\";\nimport loremIpsum from \"lorem-ipsum\";\nimport ScrollContainer from \"./ScrollContainer\";\nimport \"../styles/GenericContainer.css\";\n\nconst gradients = [\n  \"linear-gradient(135deg, rgb(168, 237, 234) 0%, rgb(254, 214, 227) 100%)\",\n  \"linear-gradient(135deg, rgb(224, 195, 252) 0%, rgb(142, 197, 252) 100%)\",\n  \"linear-gradient(120deg, rgb(224, 195, 252) 0%, rgb(142, 197, 252) 100%)\",\n  \"linear-gradient(to top, rgb(193, 223, 196) 0%, rgb(222, 236, 221) 100%)\",\n  \"linear-gradient(to top, rgb(150, 251, 196) 0%, rgb(249, 245, 134) 100%)\",\n  \"linear-gradient(to top, rgb(255, 241, 235) 0%, rgb(172, 224, 249) 100%)\",\n  \"linear-gradient(135deg, rgb(240, 235, 251) 0%, rgb(245, 87, 108) 100%)\",\n  \"linear-gradient(-20deg, rgb(221, 214, 243) 0%, rgb(250, 172, 168) 100%, rgb(250, 172, 168) 100%)\",\n  \"linear-gradient(120deg, rgb(246, 211, 101) 0%, rgb(253, 160, 133) 100%)\",\n  \"linear-gradient(to top, rgb(235, 192, 253) 0%, rgb(217, 222, 216) 100%)\",\n  \"linear-gradient(to top, rgb(150, 251, 196) 0%, rgb(249, 245, 134) 100%)\",\n  \"linear-gradient(to top, rgb(210, 153, 194) 0%, rgb(254, 249, 215) 100%)\"\n];\n\n/**\n * Basic container holding configuration options for virtual scroller\n * @extends Component\n */\nclass GenericContainer extends Component {\n  constructor() {\n    super();\n\n    this.height = window.innerHeight;\n\n    this.list = Array(100000)\n      .fill()\n      .map((val, index) => {\n        return {\n          index,\n          text: loremIpsum({\n            count: 1,\n            units: \"sentences\",\n            sentenceLowerBound: 1,\n            sentenceUpperBound: 2\n          }),\n          background: sample(gradients)\n        };\n      });\n\n    this.range = this.list.length - 1;\n  }\n\n  /**\n   * Basic rendering function to pass to ScrollContainer\n   * @param  {Object} item object variable with property we are interested in rendering\n   */\n  renderItem = item => (\n    <>\n      <div className=\"overlay\">{item.text}</div>\n    </>\n  );\n\n  render() {\n    return (\n      <>\n        <div className=\"scroll-container\" style={{ height: this.height }}>\n          <ScrollContainer\n            data={this.list}\n            range={this.range}\n            renderItem={this.renderItem}\n            columnCount={3}\n            bufferCount={1}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default GenericContainer;\n","import React, { Component } from \"react\";\nimport GenericContainer from \"./containers/GenericContainer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <GenericContainer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}